// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ServeFileRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ServeFileRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsServeFileRequest(bb:flatbuffers.ByteBuffer, obj?:ServeFileRequest):ServeFileRequest {
  return (obj || new ServeFileRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsServeFileRequest(bb:flatbuffers.ByteBuffer, obj?:ServeFileRequest):ServeFileRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ServeFileRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

filePath():string|null
filePath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
filePath(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

peerId():string|null
peerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
peerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startServeFileRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFilePath(builder:flatbuffers.Builder, filePathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, filePathOffset, 0);
}

static addPeerId(builder:flatbuffers.Builder, peerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, peerIdOffset, 0);
}

static endServeFileRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createServeFileRequest(builder:flatbuffers.Builder, filePathOffset:flatbuffers.Offset, peerIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  ServeFileRequest.startServeFileRequest(builder);
  ServeFileRequest.addFilePath(builder, filePathOffset);
  ServeFileRequest.addPeerId(builder, peerIdOffset);
  return ServeFileRequest.endServeFileRequest(builder);
}
}
