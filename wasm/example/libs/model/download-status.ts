// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class DownloadStatus {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DownloadStatus {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDownloadStatus(bb:flatbuffers.ByteBuffer, obj?:DownloadStatus):DownloadStatus {
  return (obj || new DownloadStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDownloadStatus(bb:flatbuffers.ByteBuffer, obj?:DownloadStatus):DownloadStatus {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DownloadStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

downloading():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_downloading(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

fileBasePath():string|null
fileBasePath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fileBasePath(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fileName():string|null
fileName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fileName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fileSha256():string|null
fileSha256(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fileSha256(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fullFileSize():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mutate_full_file_size(value:bigint):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
}

currentFileSize():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mutate_current_file_size(value:bigint):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
}

static startDownloadStatus(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addDownloading(builder:flatbuffers.Builder, downloading:boolean) {
  builder.addFieldInt8(0, +downloading, +false);
}

static addFileBasePath(builder:flatbuffers.Builder, fileBasePathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, fileBasePathOffset, 0);
}

static addFileName(builder:flatbuffers.Builder, fileNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, fileNameOffset, 0);
}

static addFileSha256(builder:flatbuffers.Builder, fileSha256Offset:flatbuffers.Offset) {
  builder.addFieldOffset(3, fileSha256Offset, 0);
}

static addFullFileSize(builder:flatbuffers.Builder, fullFileSize:bigint) {
  builder.addFieldInt64(4, fullFileSize, BigInt('0'));
}

static addCurrentFileSize(builder:flatbuffers.Builder, currentFileSize:bigint) {
  builder.addFieldInt64(5, currentFileSize, BigInt('0'));
}

static endDownloadStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDownloadStatus(builder:flatbuffers.Builder, downloading:boolean, fileBasePathOffset:flatbuffers.Offset, fileNameOffset:flatbuffers.Offset, fileSha256Offset:flatbuffers.Offset, fullFileSize:bigint, currentFileSize:bigint):flatbuffers.Offset {
  DownloadStatus.startDownloadStatus(builder);
  DownloadStatus.addDownloading(builder, downloading);
  DownloadStatus.addFileBasePath(builder, fileBasePathOffset);
  DownloadStatus.addFileName(builder, fileNameOffset);
  DownloadStatus.addFileSha256(builder, fileSha256Offset);
  DownloadStatus.addFullFileSize(builder, fullFileSize);
  DownloadStatus.addCurrentFileSize(builder, currentFileSize);
  return DownloadStatus.endDownloadStatus(builder);
}
}
