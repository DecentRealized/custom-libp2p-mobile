// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class SendMessageRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):SendMessageRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSendMessageRequest(bb:flatbuffers.ByteBuffer, obj?:SendMessageRequest):SendMessageRequest {
  return (obj || new SendMessageRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSendMessageRequest(bb:flatbuffers.ByteBuffer, obj?:SendMessageRequest):SendMessageRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SendMessageRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

peerId():string|null
peerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
peerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSendMessageRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, messageOffset, 0);
}

static addPeerId(builder:flatbuffers.Builder, peerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, peerIdOffset, 0);
}

static endSendMessageRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSendMessageRequest(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset, peerIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  SendMessageRequest.startSendMessageRequest(builder);
  SendMessageRequest.addMessage(builder, messageOffset);
  SendMessageRequest.addPeerId(builder, peerIdOffset);
  return SendMessageRequest.endSendMessageRequest(builder);
}
}
