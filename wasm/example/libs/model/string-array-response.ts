// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class StringArrayResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):StringArrayResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStringArrayResponse(bb:flatbuffers.ByteBuffer, obj?:StringArrayResponse):StringArrayResponse {
  return (obj || new StringArrayResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStringArrayResponse(bb:flatbuffers.ByteBuffer, obj?:StringArrayResponse):StringArrayResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StringArrayResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

output(index: number):string
output(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
output(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

outputLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

error():string|null
error(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
error(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startStringArrayResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addOutput(builder:flatbuffers.Builder, outputOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, outputOffset, 0);
}

static createOutputVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOutputVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errorOffset, 0);
}

static endStringArrayResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStringArrayResponse(builder:flatbuffers.Builder, outputOffset:flatbuffers.Offset, errorOffset:flatbuffers.Offset):flatbuffers.Offset {
  StringArrayResponse.startStringArrayResponse(builder);
  StringArrayResponse.addOutput(builder, outputOffset);
  StringArrayResponse.addError(builder, errorOffset);
  return StringArrayResponse.endStringArrayResponse(builder);
}
}
