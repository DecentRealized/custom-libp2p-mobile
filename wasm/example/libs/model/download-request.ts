// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class DownloadRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DownloadRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDownloadRequest(bb:flatbuffers.ByteBuffer, obj?:DownloadRequest):DownloadRequest {
  return (obj || new DownloadRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDownloadRequest(bb:flatbuffers.ByteBuffer, obj?:DownloadRequest):DownloadRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DownloadRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fileSha256():string|null
fileSha256(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fileSha256(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

peerId():string|null
peerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
peerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDownloadRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFileSha256(builder:flatbuffers.Builder, fileSha256Offset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fileSha256Offset, 0);
}

static addPeerId(builder:flatbuffers.Builder, peerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, peerIdOffset, 0);
}

static endDownloadRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDownloadRequest(builder:flatbuffers.Builder, fileSha256Offset:flatbuffers.Offset, peerIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  DownloadRequest.startDownloadRequest(builder);
  DownloadRequest.addFileSha256(builder, fileSha256Offset);
  DownloadRequest.addPeerId(builder, peerIdOffset);
  return DownloadRequest.endDownloadRequest(builder);
}
}
