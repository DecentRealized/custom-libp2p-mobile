// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DownloadStatus struct {
	_tab flatbuffers.Table
}

func GetRootAsDownloadStatus(buf []byte, offset flatbuffers.UOffsetT) *DownloadStatus {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DownloadStatus{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDownloadStatus(buf []byte, offset flatbuffers.UOffsetT) *DownloadStatus {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DownloadStatus{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DownloadStatus) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DownloadStatus) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DownloadStatus) Downloading() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DownloadStatus) MutateDownloading(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *DownloadStatus) FileBasePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DownloadStatus) FileName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DownloadStatus) FileSha256() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DownloadStatus) FullFileSize() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DownloadStatus) MutateFullFileSize(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *DownloadStatus) CurrentFileSize() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DownloadStatus) MutateCurrentFileSize(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func DownloadStatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func DownloadStatusAddDownloading(builder *flatbuffers.Builder, downloading bool) {
	builder.PrependBoolSlot(0, downloading, false)
}
func DownloadStatusAddFileBasePath(builder *flatbuffers.Builder, fileBasePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(fileBasePath), 0)
}
func DownloadStatusAddFileName(builder *flatbuffers.Builder, fileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(fileName), 0)
}
func DownloadStatusAddFileSha256(builder *flatbuffers.Builder, fileSha256 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(fileSha256), 0)
}
func DownloadStatusAddFullFileSize(builder *flatbuffers.Builder, fullFileSize uint64) {
	builder.PrependUint64Slot(4, fullFileSize, 0)
}
func DownloadStatusAddCurrentFileSize(builder *flatbuffers.Builder, currentFileSize uint64) {
	builder.PrependUint64Slot(5, currentFileSize, 0)
}
func DownloadStatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
